/* Given a sorted list of integers, output the middle integer. A negative number indicates the end of the input (the negative number 
is not a part of the sorted list). Assume the number of integers is always odd.

Ex: If the input is:

2 3 4 8 11 -1 

the output is:

Middle item: 4

The maximum number of list values for any test case should not exceed 9. If exceeded, output "Too many numbers".

Hint: First read the data into an array. Then, based on the array's size, find the middle item. */

import java.util.Scanner; 

public class LabProgram {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      int[] userValues = new int[9];  // Set of data specified by the user      

      /* Type your code here. */
      
    
    int mid;
    int temp;
    int size = 0;
    int newNumber;

    do { 
      newNumber = scnr.nextInt();
      if(newNumber < 0){
        break;
      }
      if(size > 8){
        size++;
      }
      else if (newNumber >= 0 ){
        userValues[size] = newNumber;
        size++;
      }
    }
    while (newNumber > -1);

    if (size > 9) {
      System.out.println("Too many numbers");   
    }
    else{
      mid = userValues[size/2];
      System.out.println("Middle item: " + mid);
    }
  
   
   }
}

/*
1) if you see a -1 then you stop reading in new numbers 
if(newNumber < 0){
        break;
      }
2)  if its not -1 then we add it to our array and increase the size variable by 1
else if (newNumber >= 0 ){
        userValues[size] = newNumber;
        size++;
      }
3) If we have reached more than 8 numbers in our array, we cant do userValues[9] because that will give index out of bounds error, but we still want to keep counting the size so we do 
if(size > 8){
        size++;
      }
*/
